================= 1 ================

1) Na Tabela III é apontado que o Open VSwitch suporta apenas a versão 1.0 do protocolo OpenFlow. Versões mais atuais desse software apresentam suporte para as versões 1.0, 1.1, 1.2 e 1.3 do protocolo com um grau satisfatório (faltando opcionais) de aderência à especificação. Há também suporte experimental à versão 1.4 do protocolo:

    https://github.com/horms/openvswitch/tree/master/include/openflow

No caso, é legal mencionar também o README de desenvolvimento dessas features. Me parece que esse arquivo não é atualizado com tanta frequência... Desde que o módulo in-kernel do Open VSwitch foi incorporado na árvore Linux Kernel, cheguei a ver patches para suporte inicial a QinQ e MPLS, por exemplo. Mas já serve como uma lista compreensiva para o que ainda está faltando:

    https://github.com/horms/openvswitch/blob/master/OPENFLOW-1.1%2B

Interessantemente, um dos grandes problemas de desenvolvimento no Open VSwitch é o suporte a multipart messages (1.3) e bundles (1.4).


2) Ainda sobre a Tabela III... Segundo a página do LINC Switch, há suporte para a versão 1.4 do protocolo OpenFlow (embora eu não tenha estudado o nível de compliance). O histórico de commits no repositório indica que a implementação dessa versão do protocolo se iniciou em Outubro de 2013:

https://github.com/FlowForwarding/LINC-Switch


3) Acho que serve mais como curiosidade do que como contribuição, mas... Apesar do Frenetic se caracterizar como uma linguagem de programação, há um pequeno controlador / framework em sua arquitetura. O suporte ao protocolo OpenFlow utiliza a biblioteca ocaml-openflow, que foi originalmente desenvolvida pelo pessoal do OpenMirage (MirageOS). A versão utilizada no projeto Frenetic é, no entanto, um fork dessa biblioteca.

Oficialmente há suporte apenas às versões iniciais do protocolo na biblioteca ocaml-openflow; mesmo o suporte a TLVs e matches OXM é incompleto e pouco flexível, por exemplo. Mas é importante notar que o Frenetic aprovou um projeto no Google Summer of Code 2014, então há um estudante trabalhando no suporte ao OpenFlow 1.3 ou superior para essa biblioteca. Na minha opinião, talvez seja algo a se observar nos próximos meses.


Acho que é isso no momento. Pretendo realizar uma leitura mais aprofundada do survey nos próximos dias, e também repassar ao pessoal do laboratório na UFSCar. Parabéns pelo esforço, faltava uma análise nesse formato para a área de SDN :)

---
Ricardo de Freitas Gesuatto
Computer Science - Federal University of São Carlos
Asgard - Above the Cloud Computing


================= 2 ================


Olá Christian,
Muito obrigado por compartilhar o  artigo ! Comecei  analisá-lo com o Atlas T.I. para verificar os assuntos chave, e quais os temas mais citados. Até o IPv6, que não vejo muita preocupação nem na indústria nem na academia, está citado.
Uma coisa que notei no "word crunch"que o NOX é muito abordado, apesar do POX do Murphy ser tão onipresente, principalmente no Mininet. Acho que pela extensão do trabalho, com tantos artigos, vou demorar um tempo para digerí-lo. 
Senti uma falta do Pyresonance, que estou trabalhando atualmente na PUC. Quem sabe por ser muito focado no OF1.0 e no POX. Espero que o Feamster continue com o projeto, quem sabe de uma forma mais aberta para outras plataformas.
  Parabéns, o artigo é um verdadeiro "Atlas" para as SDN.
Abraço,
Márcio 

================= 3 ================

Acabei a leitura do survey e gostei do conteúdo, parabéns pelo trabalho. Uma informação que talvez possa contribuir:

Penso que se tomarmos por base soluções WLAN de diversos fabricantes que são baseadas em controladoras e LAP (lightweight access point), a abordagem de separação dos planos de controle e dados já é uma realidade disseminada comercialmente. Talvez esse seja um exemplo conveniente de ser destacado porque mostra o interesse da indústria.

Muitos LAPs sequer têm um firmware (caixa fria) para realizar encaminhamento e quando são ligados procuram imediatamente uma controladora responsável por definir suas configurações (e por baixar seu firmaware).

No entanto esse não é um exemplo puro de SDN, é um exemplo prático de separação dos planos de controle e de dados. A controladora ainda tem que ser configurada (não programada). Ainda assim, o exemplo confirma alguns benefícios da separação dos planos, a exemplo de: gerenciamento centralizado, reações dinâmicas, configuração mais fácil.

Por exemplo, a controladora é capaz de ajustar a potência dos sinais das células e de fazer dinamicamente a alocação dos canais para evitar sobreposição (interferência). Além disso, há vantagens de gerência e segurança...

================= 4 ================